// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.

import { Bot, webhookCallback } from "https://deno.land/x/grammy@v1.8.3/mod.ts";
import { createUser } from "../create-user.ts";
import { getQuestion } from "../get-question.ts";
import { resetProgress } from "../reset-progress.ts";
const bot = new Bot(Deno.env.get("BOT_TOKEN") || "");

bot.command("start", (ctx) => {
  createUser(ctx);
  ctx.reply(
    `Hi, ${ctx.update.message?.from.first_name}! üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–µ—Å—Ç–æ–≤ ‚Äì –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üñ•Ô∏è‚ú® `,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", callback_data: "javascript_01_01" }],
        ],
      },
    },
  );
});

bot.command(
  "ping",
  (ctx) => ctx.reply(`Pong! ${new Date()} ${Date.now()}`),
);

bot.on("callback_query:data", async (ctx) => {
  const callbackData = ctx.callbackQuery.data;

  if (callbackData === "javascript_01_01") {
    try {
      resetProgress(ctx.message?.from?.username);
      const questionContext = {
        lesson_number: 1,
        subtopic: 1,
      };

      const questions = await getQuestion(questionContext);
      if (questions.length > 0) {
        const {
          topic,
          question,
          variant_0,
          variant_1,
          variant_2,
          image_lesson_url,
        } = questions[0];

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `${topic}\n\n<i><u>–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è:</u></i>\n\n<b>–í–æ–ø—Ä–æ—Å ‚Ññ1</b>\n\n${question}\n\n<b>üéØ –í–∞—à —Å—á—ë—Ç: 0XP </b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: variant_0 || "–í–∞—Ä–∏–∞–Ω—Ç 1",
            callback_data: `${callbackData}_0`,
          }],
          [{
            text: variant_1 || "–í–∞—Ä–∏–∞–Ω—Ç 2",
            callback_data: `${callbackData}_1`,
          }],
          [{
            text: variant_2 || "–í–∞—Ä–∏–∞–Ω—Ç 3",
            callback_data: `${callbackData}_2`,
          }],
        ];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.replyWithPhoto(image_lesson_url, {
          caption: messageText,
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: inlineKeyboard },
        });
        console.log(questions);
      } else {
        await ctx.reply("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      }
    } catch (error) {
      console.error(error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
    }
  }
});

const handleUpdate = webhookCallback(bot, "std/http");

Deno.serve(async (req) => {
  try {
    const url = new URL(req.url);
    if (url.searchParams.get("secret") !== Deno.env.get("FUNCTION_SECRET")) {
      return new Response("not allowed", { status: 405 });
    }

    return await handleUpdate(req);
  } catch (err) {
    console.error(err);
  }
});
